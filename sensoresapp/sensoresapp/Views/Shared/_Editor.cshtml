@model sensoresapp.Utils.ClaseSensor

@{
    ViewBag.Title = "Editar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyB9a-0ifzpDEsNH068yyfU4J6sU0k9Ie30"></script>


<h2 class="text-center">ABM</h2>



    using (Html.BeginForm("Editar", "Sensor", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.AntiForgeryToken()
        <div>
            <div class="form-horizontal text-center">

                <h4> Sensor @Html.Raw(ViewBag.IdSensor)</h4>
            </div>
            <hr />
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.id)

                        <div class="form-group">
                            @Html.LabelFor(model => model.ip, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ip, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ip, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.puerto, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.puerto, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.puerto, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.mac, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.mac, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.mac, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ubicacion, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ubicacion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ubicacion, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.refresco, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.refresco, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.refresco, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <span>
                                <input type="submit" value="Guardar" class="btn btn-info" />
                            </span>

                            <button type="button">

                                @Html.ActionLink("Editar", "Editar", new { id = Model.id })
                            </button>             
                      </div>
                    </div>
                    @*///Mapa///*@

                </div>
                <div class="col-md-12 text-center">
                    <button>   @Html.ActionLink("Volver a lista", "Index")</button>
                </div>
            </div>

        </div>


    }
}
@section scripts {
    <section class="scripts">

        <script type="text/javascript">
@*<!-- This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded. -->*@
    $(document).ready(function () {
        Initialize();
    });

    // Where all the fun happens
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
            //var Tunisie = new google.maps.LatLng(36.81881, 10.16596);  //Original
            var Tunisie = new google.maps.LatLng(-34.6386472, -58.4017069); //buenos aires

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 12,
            center: Tunisie,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

            debugger;
        //tengo que tomar los parametros convertidos en array. "parse"
            var data = $.parseJSON(@(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Ubicaciones))))
            

           
            $.each(data, function (i, item) {
            var marker = new google.maps.Marker({
            'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
            'map': map,
            'title': item.PlaceName
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
            debugger;
            var infowindow = new google.maps.InfoWindow({
            content: "<div class='infoDiv'><h2><a href='Detalle/" + item.Id +"'>" +   item.PlaceName + "</a></div></div>"
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
            infowindow.open(map, marker);
            });

            })
            }


        </script>
    </section>
}



